mod common;

use common::{KEYSPACE, TABLE, LC};
use latte::*;

const LOAD_COUNT = latte::param!("rows", 100000);
const READ_SIZE = latte::param!("read_size", 10);

const READ = "read";

pub async fn schema(db) {
    common::init_schema(db).await?;
}

pub async fn erase(db) {
    common::erase(db).await?;
}

pub async fn prepare(db) {
    common::prepare(db).await?;
    db.prepare(READ, `SELECT * FROM ${KEYSPACE}.${TABLE}
        WHERE time >= ? AND lc = ? LIMIT ${READ_SIZE}`).await?;
}

pub async fn load(db, i) {
    common::insert_row(db, i).await?;
}

pub async fn run(db, i) {
    let time = hash(i) % LOAD_COUNT * 1000;
    let lc = hash2(i, 16542) % LC;
    db.execute_prepared(READ, [time, lc]).await?;
}
